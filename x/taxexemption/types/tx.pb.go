// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: terra/taxexemption/v1beta1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgAddTaxExemptionZone defines a message for adding a tax exemption zone.
type MsgAddTaxExemptionZone struct {
	Zone      string   `protobuf:"bytes,1,opt,name=zone,proto3" json:"zone,omitempty" yaml:"zone"`
	Outgoing  bool     `protobuf:"varint,2,opt,name=outgoing,proto3" json:"outgoing,omitempty" yaml:"outgoing"`
	Incoming  bool     `protobuf:"varint,3,opt,name=incoming,proto3" json:"incoming,omitempty" yaml:"incoming"`
	CrossZone bool     `protobuf:"varint,4,opt,name=cross_zone,json=crossZone,proto3" json:"cross_zone,omitempty" yaml:"cross_zone"`
	Addresses []string `protobuf:"bytes,5,rep,name=addresses,proto3" json:"addresses,omitempty" yaml:"addresses"`
	Authority string   `protobuf:"bytes,6,opt,name=authority,proto3" json:"authority,omitempty" yaml:"authority"`
}

func (m *MsgAddTaxExemptionZone) Reset()      { *m = MsgAddTaxExemptionZone{} }
func (*MsgAddTaxExemptionZone) ProtoMessage() {}
func (*MsgAddTaxExemptionZone) Descriptor() ([]byte, []int) {
	return fileDescriptor_20f3cd742915e687, []int{0}
}
func (m *MsgAddTaxExemptionZone) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddTaxExemptionZone) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddTaxExemptionZone.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddTaxExemptionZone) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddTaxExemptionZone.Merge(m, src)
}
func (m *MsgAddTaxExemptionZone) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddTaxExemptionZone) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddTaxExemptionZone.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddTaxExemptionZone proto.InternalMessageInfo

type MsgAddTaxExemptionZoneResponse struct {
}

func (m *MsgAddTaxExemptionZoneResponse) Reset()         { *m = MsgAddTaxExemptionZoneResponse{} }
func (m *MsgAddTaxExemptionZoneResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddTaxExemptionZoneResponse) ProtoMessage()    {}
func (*MsgAddTaxExemptionZoneResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_20f3cd742915e687, []int{1}
}
func (m *MsgAddTaxExemptionZoneResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddTaxExemptionZoneResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddTaxExemptionZoneResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddTaxExemptionZoneResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddTaxExemptionZoneResponse.Merge(m, src)
}
func (m *MsgAddTaxExemptionZoneResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddTaxExemptionZoneResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddTaxExemptionZoneResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddTaxExemptionZoneResponse proto.InternalMessageInfo

// MsgRemoveTaxExemptionZone defines a message for removing a tax exemption zone.
type MsgRemoveTaxExemptionZone struct {
	Zone      string `protobuf:"bytes,1,opt,name=zone,proto3" json:"zone,omitempty" yaml:"zone"`
	Authority string `protobuf:"bytes,2,opt,name=authority,proto3" json:"authority,omitempty" yaml:"authority"`
}

func (m *MsgRemoveTaxExemptionZone) Reset()      { *m = MsgRemoveTaxExemptionZone{} }
func (*MsgRemoveTaxExemptionZone) ProtoMessage() {}
func (*MsgRemoveTaxExemptionZone) Descriptor() ([]byte, []int) {
	return fileDescriptor_20f3cd742915e687, []int{2}
}
func (m *MsgRemoveTaxExemptionZone) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveTaxExemptionZone) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveTaxExemptionZone.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveTaxExemptionZone) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveTaxExemptionZone.Merge(m, src)
}
func (m *MsgRemoveTaxExemptionZone) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveTaxExemptionZone) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveTaxExemptionZone.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveTaxExemptionZone proto.InternalMessageInfo

type MsgRemoveTaxExemptionZoneResponse struct {
}

func (m *MsgRemoveTaxExemptionZoneResponse) Reset()         { *m = MsgRemoveTaxExemptionZoneResponse{} }
func (m *MsgRemoveTaxExemptionZoneResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveTaxExemptionZoneResponse) ProtoMessage()    {}
func (*MsgRemoveTaxExemptionZoneResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_20f3cd742915e687, []int{3}
}
func (m *MsgRemoveTaxExemptionZoneResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveTaxExemptionZoneResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveTaxExemptionZoneResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveTaxExemptionZoneResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveTaxExemptionZoneResponse.Merge(m, src)
}
func (m *MsgRemoveTaxExemptionZoneResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveTaxExemptionZoneResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveTaxExemptionZoneResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveTaxExemptionZoneResponse proto.InternalMessageInfo

// MsgModifyTaxExemptionZone defines a message for modifying a tax exemption zone.
type MsgModifyTaxExemptionZone struct {
	Zone      string `protobuf:"bytes,1,opt,name=zone,proto3" json:"zone,omitempty" yaml:"zone"`
	Outgoing  bool   `protobuf:"varint,2,opt,name=outgoing,proto3" json:"outgoing,omitempty" yaml:"outgoing"`
	Incoming  bool   `protobuf:"varint,3,opt,name=incoming,proto3" json:"incoming,omitempty" yaml:"incoming"`
	CrossZone bool   `protobuf:"varint,4,opt,name=cross_zone,json=crossZone,proto3" json:"cross_zone,omitempty" yaml:"cross_zone"`
	Authority string `protobuf:"bytes,5,opt,name=authority,proto3" json:"authority,omitempty" yaml:"authority"`
}

func (m *MsgModifyTaxExemptionZone) Reset()      { *m = MsgModifyTaxExemptionZone{} }
func (*MsgModifyTaxExemptionZone) ProtoMessage() {}
func (*MsgModifyTaxExemptionZone) Descriptor() ([]byte, []int) {
	return fileDescriptor_20f3cd742915e687, []int{4}
}
func (m *MsgModifyTaxExemptionZone) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgModifyTaxExemptionZone) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgModifyTaxExemptionZone.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgModifyTaxExemptionZone) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgModifyTaxExemptionZone.Merge(m, src)
}
func (m *MsgModifyTaxExemptionZone) XXX_Size() int {
	return m.Size()
}
func (m *MsgModifyTaxExemptionZone) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgModifyTaxExemptionZone.DiscardUnknown(m)
}

var xxx_messageInfo_MsgModifyTaxExemptionZone proto.InternalMessageInfo

type MsgModifyTaxExemptionZoneResponse struct {
}

func (m *MsgModifyTaxExemptionZoneResponse) Reset()         { *m = MsgModifyTaxExemptionZoneResponse{} }
func (m *MsgModifyTaxExemptionZoneResponse) String() string { return proto.CompactTextString(m) }
func (*MsgModifyTaxExemptionZoneResponse) ProtoMessage()    {}
func (*MsgModifyTaxExemptionZoneResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_20f3cd742915e687, []int{5}
}
func (m *MsgModifyTaxExemptionZoneResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgModifyTaxExemptionZoneResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgModifyTaxExemptionZoneResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgModifyTaxExemptionZoneResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgModifyTaxExemptionZoneResponse.Merge(m, src)
}
func (m *MsgModifyTaxExemptionZoneResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgModifyTaxExemptionZoneResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgModifyTaxExemptionZoneResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgModifyTaxExemptionZoneResponse proto.InternalMessageInfo

// MsgAddTaxExemptionAddress defines a message for adding tax exemption addresses.
type MsgAddTaxExemptionAddress struct {
	Zone      string   `protobuf:"bytes,1,opt,name=zone,proto3" json:"zone,omitempty" yaml:"zone"`
	Addresses []string `protobuf:"bytes,2,rep,name=addresses,proto3" json:"addresses,omitempty" yaml:"addresses"`
	Authority string   `protobuf:"bytes,3,opt,name=authority,proto3" json:"authority,omitempty" yaml:"authority"`
}

func (m *MsgAddTaxExemptionAddress) Reset()      { *m = MsgAddTaxExemptionAddress{} }
func (*MsgAddTaxExemptionAddress) ProtoMessage() {}
func (*MsgAddTaxExemptionAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_20f3cd742915e687, []int{6}
}
func (m *MsgAddTaxExemptionAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddTaxExemptionAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddTaxExemptionAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddTaxExemptionAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddTaxExemptionAddress.Merge(m, src)
}
func (m *MsgAddTaxExemptionAddress) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddTaxExemptionAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddTaxExemptionAddress.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddTaxExemptionAddress proto.InternalMessageInfo

type MsgAddTaxExemptionAddressResponse struct {
}

func (m *MsgAddTaxExemptionAddressResponse) Reset()         { *m = MsgAddTaxExemptionAddressResponse{} }
func (m *MsgAddTaxExemptionAddressResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddTaxExemptionAddressResponse) ProtoMessage()    {}
func (*MsgAddTaxExemptionAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_20f3cd742915e687, []int{7}
}
func (m *MsgAddTaxExemptionAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddTaxExemptionAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddTaxExemptionAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddTaxExemptionAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddTaxExemptionAddressResponse.Merge(m, src)
}
func (m *MsgAddTaxExemptionAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddTaxExemptionAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddTaxExemptionAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddTaxExemptionAddressResponse proto.InternalMessageInfo

// MsgRemoveTaxExemptionAddress defines a message for removing tax exemption addresses.
type MsgRemoveTaxExemptionAddress struct {
	Zone      string   `protobuf:"bytes,1,opt,name=zone,proto3" json:"zone,omitempty" yaml:"zone"`
	Addresses []string `protobuf:"bytes,2,rep,name=addresses,proto3" json:"addresses,omitempty" yaml:"addresses"`
	Authority string   `protobuf:"bytes,3,opt,name=authority,proto3" json:"authority,omitempty" yaml:"authority"`
}

func (m *MsgRemoveTaxExemptionAddress) Reset()      { *m = MsgRemoveTaxExemptionAddress{} }
func (*MsgRemoveTaxExemptionAddress) ProtoMessage() {}
func (*MsgRemoveTaxExemptionAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_20f3cd742915e687, []int{8}
}
func (m *MsgRemoveTaxExemptionAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveTaxExemptionAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveTaxExemptionAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveTaxExemptionAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveTaxExemptionAddress.Merge(m, src)
}
func (m *MsgRemoveTaxExemptionAddress) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveTaxExemptionAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveTaxExemptionAddress.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveTaxExemptionAddress proto.InternalMessageInfo

type MsgRemoveTaxExemptionAddressResponse struct {
}

func (m *MsgRemoveTaxExemptionAddressResponse) Reset()         { *m = MsgRemoveTaxExemptionAddressResponse{} }
func (m *MsgRemoveTaxExemptionAddressResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveTaxExemptionAddressResponse) ProtoMessage()    {}
func (*MsgRemoveTaxExemptionAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_20f3cd742915e687, []int{9}
}
func (m *MsgRemoveTaxExemptionAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveTaxExemptionAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveTaxExemptionAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveTaxExemptionAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveTaxExemptionAddressResponse.Merge(m, src)
}
func (m *MsgRemoveTaxExemptionAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveTaxExemptionAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveTaxExemptionAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveTaxExemptionAddressResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgAddTaxExemptionZone)(nil), "terra.taxexemption.v1beta1.MsgAddTaxExemptionZone")
	proto.RegisterType((*MsgAddTaxExemptionZoneResponse)(nil), "terra.taxexemption.v1beta1.MsgAddTaxExemptionZoneResponse")
	proto.RegisterType((*MsgRemoveTaxExemptionZone)(nil), "terra.taxexemption.v1beta1.MsgRemoveTaxExemptionZone")
	proto.RegisterType((*MsgRemoveTaxExemptionZoneResponse)(nil), "terra.taxexemption.v1beta1.MsgRemoveTaxExemptionZoneResponse")
	proto.RegisterType((*MsgModifyTaxExemptionZone)(nil), "terra.taxexemption.v1beta1.MsgModifyTaxExemptionZone")
	proto.RegisterType((*MsgModifyTaxExemptionZoneResponse)(nil), "terra.taxexemption.v1beta1.MsgModifyTaxExemptionZoneResponse")
	proto.RegisterType((*MsgAddTaxExemptionAddress)(nil), "terra.taxexemption.v1beta1.MsgAddTaxExemptionAddress")
	proto.RegisterType((*MsgAddTaxExemptionAddressResponse)(nil), "terra.taxexemption.v1beta1.MsgAddTaxExemptionAddressResponse")
	proto.RegisterType((*MsgRemoveTaxExemptionAddress)(nil), "terra.taxexemption.v1beta1.MsgRemoveTaxExemptionAddress")
	proto.RegisterType((*MsgRemoveTaxExemptionAddressResponse)(nil), "terra.taxexemption.v1beta1.MsgRemoveTaxExemptionAddressResponse")
}

func init() {
	proto.RegisterFile("terra/taxexemption/v1beta1/tx.proto", fileDescriptor_20f3cd742915e687)
}

var fileDescriptor_20f3cd742915e687 = []byte{
	// 568 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x96, 0x41, 0x8b, 0xd3, 0x40,
	0x14, 0x80, 0x33, 0xe9, 0xee, 0xb2, 0x1d, 0x85, 0xd5, 0xec, 0xba, 0x74, 0x8b, 0x24, 0x75, 0x2a,
	0xd2, 0x8b, 0x09, 0xdb, 0xb5, 0x20, 0x05, 0xc1, 0x2d, 0x78, 0x2c, 0x42, 0xf0, 0xb4, 0x17, 0x49,
	0x93, 0x31, 0x1b, 0xd8, 0x64, 0x4a, 0x66, 0x5a, 0x52, 0x8f, 0x82, 0xe0, 0x49, 0xbc, 0x29, 0x9e,
	0xfa, 0x2b, 0x04, 0xff, 0x81, 0xe0, 0x65, 0x8f, 0xe2, 0xa1, 0x48, 0x7b, 0xf1, 0xdc, 0x5f, 0x20,
	0x99, 0xec, 0x64, 0xb7, 0x4b, 0xd2, 0xda, 0xdc, 0xf4, 0x96, 0xf6, 0xbd, 0x2f, 0x7c, 0xef, 0xe5,
	0xcd, 0x63, 0x60, 0x9d, 0xe1, 0x30, 0xb4, 0x0c, 0x66, 0x45, 0x38, 0xc2, 0x7e, 0x9f, 0x79, 0x24,
	0x30, 0x86, 0x87, 0x3d, 0xcc, 0xac, 0x43, 0x83, 0x45, 0x7a, 0x3f, 0x24, 0x8c, 0x28, 0x55, 0x9e,
	0xa4, 0x5f, 0x4d, 0xd2, 0x2f, 0x92, 0xaa, 0x7b, 0x2e, 0x71, 0x09, 0x4f, 0x33, 0xe2, 0xa7, 0x84,
	0x40, 0xdf, 0x65, 0xb8, 0xdf, 0xa5, 0xee, 0xb1, 0xe3, 0xbc, 0xb0, 0xa2, 0x67, 0x02, 0x3a, 0x21,
	0x01, 0x56, 0xea, 0x70, 0xe3, 0x35, 0x09, 0x70, 0x05, 0xd4, 0x40, 0xa3, 0xdc, 0xd9, 0x99, 0x4f,
	0xb4, 0x1b, 0x23, 0xcb, 0x3f, 0x6b, 0xa3, 0xf8, 0x5f, 0x64, 0xf2, 0xa0, 0x62, 0xc0, 0x6d, 0x32,
	0x60, 0x2e, 0xf1, 0x02, 0xb7, 0x22, 0xd7, 0x40, 0x63, 0xbb, 0xb3, 0x3b, 0x9f, 0x68, 0x3b, 0x49,
	0xa2, 0x88, 0x20, 0x33, 0x4d, 0x8a, 0x01, 0x2f, 0xb0, 0x89, 0x1f, 0x03, 0xa5, 0xeb, 0x80, 0x88,
	0x20, 0x33, 0x4d, 0x52, 0x1e, 0x41, 0x68, 0x87, 0x84, 0xd2, 0x97, 0x5c, 0x66, 0x83, 0x23, 0x77,
	0xe6, 0x13, 0xed, 0x76, 0x82, 0x5c, 0xc6, 0x90, 0x59, 0xe6, 0x3f, 0xb8, 0x7c, 0x13, 0x96, 0x2d,
	0xc7, 0x09, 0x31, 0xa5, 0x98, 0x56, 0x36, 0x6b, 0xa5, 0x46, 0xb9, 0xb3, 0x37, 0x9f, 0x68, 0xb7,
	0x12, 0x28, 0x0d, 0x21, 0xf3, 0x32, 0x8d, 0x33, 0x03, 0x76, 0x4a, 0x42, 0x8f, 0x8d, 0x2a, 0x5b,
	0xbc, 0xea, 0xab, 0x8c, 0x08, 0xc5, 0x8c, 0x78, 0x6e, 0xdf, 0x7c, 0x37, 0xd6, 0xa4, 0x4f, 0x63,
	0x4d, 0xfa, 0x3d, 0xd6, 0x00, 0xaa, 0x41, 0x35, 0xbb, 0x99, 0x26, 0xa6, 0x7d, 0x12, 0x50, 0x8c,
	0xde, 0x00, 0x78, 0xd0, 0xa5, 0xae, 0x89, 0x7d, 0x32, 0xc4, 0xc5, 0x5a, 0xbe, 0xa0, 0x29, 0x17,
	0xd1, 0xac, 0xc3, 0x7b, 0xb9, 0x0e, 0xa9, 0xe9, 0x67, 0x99, 0x9b, 0x76, 0x89, 0xe3, 0xbd, 0x1a,
	0xfd, 0x7f, 0xc3, 0x91, 0x76, 0x70, 0xb3, 0x78, 0x07, 0xb3, 0x7b, 0x93, 0x76, 0xf0, 0x4b, 0xf2,
	0xad, 0xaf, 0x8d, 0xc3, 0x71, 0x32, 0x6f, 0x7f, 0xff, 0xad, 0xd3, 0x31, 0x96, 0x0b, 0x8c, 0x71,
	0xa9, 0x78, 0x75, 0xd9, 0xde, 0x69, 0x75, 0x5f, 0x01, 0xbc, 0x9b, 0x39, 0x45, 0xff, 0x40, 0x81,
	0x0f, 0xe0, 0xfd, 0x65, 0xea, 0xa2, 0xc6, 0xe6, 0xcf, 0x4d, 0x58, 0xea, 0x52, 0x57, 0x79, 0x0b,
	0xe0, 0x6e, 0xd6, 0x8a, 0x6c, 0xea, 0xf9, 0x0b, 0x57, 0xcf, 0xde, 0x04, 0xd5, 0xf6, 0xfa, 0x8c,
	0xf0, 0x51, 0xde, 0x03, 0xb8, 0x9f, 0xb3, 0x3a, 0x5a, 0x2b, 0x5e, 0x9b, 0x8d, 0x55, 0x9f, 0x14,
	0xc2, 0x16, 0x84, 0x72, 0x36, 0xc4, 0x2a, 0xa1, 0x6c, 0x6c, 0xa5, 0xd0, 0xf2, 0x33, 0xc7, 0x85,
	0x72, 0x0e, 0x5c, 0x6b, 0xbd, 0xc6, 0x5f, 0x60, 0x2b, 0x85, 0x96, 0x1f, 0x13, 0xe5, 0x23, 0x80,
	0x07, 0xf9, 0x67, 0xe4, 0xf1, 0xda, 0xed, 0x17, 0x5a, 0x4f, 0x8b, 0x92, 0xc2, 0xac, 0xf3, 0xfc,
	0xdb, 0x54, 0x05, 0xe7, 0x53, 0x15, 0xfc, 0x9a, 0xaa, 0xe0, 0xc3, 0x4c, 0x95, 0xce, 0x67, 0xaa,
	0xf4, 0x63, 0xa6, 0x4a, 0x27, 0x2d, 0xd7, 0x63, 0xa7, 0x83, 0x9e, 0x6e, 0x13, 0xdf, 0xb0, 0xcf,
	0x2c, 0x4a, 0x3d, 0xfb, 0x61, 0x72, 0xfd, 0xb0, 0x49, 0x88, 0x8d, 0xe1, 0x91, 0x11, 0x2d, 0x5e,
	0x44, 0xd8, 0xa8, 0x8f, 0x69, 0x6f, 0x8b, 0x5f, 0x29, 0x8e, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff,
	0x3f, 0x10, 0x1c, 0x67, 0xab, 0x08, 0x00, 0x00,
}

func (this *MsgAddTaxExemptionZone) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgAddTaxExemptionZone)
	if !ok {
		that2, ok := that.(MsgAddTaxExemptionZone)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Zone != that1.Zone {
		return false
	}
	if this.Outgoing != that1.Outgoing {
		return false
	}
	if this.Incoming != that1.Incoming {
		return false
	}
	if this.CrossZone != that1.CrossZone {
		return false
	}
	if len(this.Addresses) != len(that1.Addresses) {
		return false
	}
	for i := range this.Addresses {
		if this.Addresses[i] != that1.Addresses[i] {
			return false
		}
	}
	if this.Authority != that1.Authority {
		return false
	}
	return true
}
func (this *MsgRemoveTaxExemptionZone) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgRemoveTaxExemptionZone)
	if !ok {
		that2, ok := that.(MsgRemoveTaxExemptionZone)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Zone != that1.Zone {
		return false
	}
	if this.Authority != that1.Authority {
		return false
	}
	return true
}
func (this *MsgModifyTaxExemptionZone) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgModifyTaxExemptionZone)
	if !ok {
		that2, ok := that.(MsgModifyTaxExemptionZone)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Zone != that1.Zone {
		return false
	}
	if this.Outgoing != that1.Outgoing {
		return false
	}
	if this.Incoming != that1.Incoming {
		return false
	}
	if this.CrossZone != that1.CrossZone {
		return false
	}
	if this.Authority != that1.Authority {
		return false
	}
	return true
}
func (this *MsgAddTaxExemptionAddress) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgAddTaxExemptionAddress)
	if !ok {
		that2, ok := that.(MsgAddTaxExemptionAddress)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Zone != that1.Zone {
		return false
	}
	if len(this.Addresses) != len(that1.Addresses) {
		return false
	}
	for i := range this.Addresses {
		if this.Addresses[i] != that1.Addresses[i] {
			return false
		}
	}
	if this.Authority != that1.Authority {
		return false
	}
	return true
}
func (this *MsgRemoveTaxExemptionAddress) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgRemoveTaxExemptionAddress)
	if !ok {
		that2, ok := that.(MsgRemoveTaxExemptionAddress)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Zone != that1.Zone {
		return false
	}
	if len(this.Addresses) != len(that1.Addresses) {
		return false
	}
	for i := range this.Addresses {
		if this.Addresses[i] != that1.Addresses[i] {
			return false
		}
	}
	if this.Authority != that1.Authority {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	AddTaxExemptionZone(ctx context.Context, in *MsgAddTaxExemptionZone, opts ...grpc.CallOption) (*MsgAddTaxExemptionZoneResponse, error)
	RemoveTaxExemptionZone(ctx context.Context, in *MsgRemoveTaxExemptionZone, opts ...grpc.CallOption) (*MsgRemoveTaxExemptionZoneResponse, error)
	ModifyTaxExemptionZone(ctx context.Context, in *MsgModifyTaxExemptionZone, opts ...grpc.CallOption) (*MsgModifyTaxExemptionZoneResponse, error)
	AddTaxExemptionAddress(ctx context.Context, in *MsgAddTaxExemptionAddress, opts ...grpc.CallOption) (*MsgAddTaxExemptionAddressResponse, error)
	RemoveTaxExemptionAddress(ctx context.Context, in *MsgRemoveTaxExemptionAddress, opts ...grpc.CallOption) (*MsgRemoveTaxExemptionAddressResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) AddTaxExemptionZone(ctx context.Context, in *MsgAddTaxExemptionZone, opts ...grpc.CallOption) (*MsgAddTaxExemptionZoneResponse, error) {
	out := new(MsgAddTaxExemptionZoneResponse)
	err := c.cc.Invoke(ctx, "/terra.taxexemption.v1beta1.Msg/AddTaxExemptionZone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveTaxExemptionZone(ctx context.Context, in *MsgRemoveTaxExemptionZone, opts ...grpc.CallOption) (*MsgRemoveTaxExemptionZoneResponse, error) {
	out := new(MsgRemoveTaxExemptionZoneResponse)
	err := c.cc.Invoke(ctx, "/terra.taxexemption.v1beta1.Msg/RemoveTaxExemptionZone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ModifyTaxExemptionZone(ctx context.Context, in *MsgModifyTaxExemptionZone, opts ...grpc.CallOption) (*MsgModifyTaxExemptionZoneResponse, error) {
	out := new(MsgModifyTaxExemptionZoneResponse)
	err := c.cc.Invoke(ctx, "/terra.taxexemption.v1beta1.Msg/ModifyTaxExemptionZone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddTaxExemptionAddress(ctx context.Context, in *MsgAddTaxExemptionAddress, opts ...grpc.CallOption) (*MsgAddTaxExemptionAddressResponse, error) {
	out := new(MsgAddTaxExemptionAddressResponse)
	err := c.cc.Invoke(ctx, "/terra.taxexemption.v1beta1.Msg/AddTaxExemptionAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveTaxExemptionAddress(ctx context.Context, in *MsgRemoveTaxExemptionAddress, opts ...grpc.CallOption) (*MsgRemoveTaxExemptionAddressResponse, error) {
	out := new(MsgRemoveTaxExemptionAddressResponse)
	err := c.cc.Invoke(ctx, "/terra.taxexemption.v1beta1.Msg/RemoveTaxExemptionAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	AddTaxExemptionZone(context.Context, *MsgAddTaxExemptionZone) (*MsgAddTaxExemptionZoneResponse, error)
	RemoveTaxExemptionZone(context.Context, *MsgRemoveTaxExemptionZone) (*MsgRemoveTaxExemptionZoneResponse, error)
	ModifyTaxExemptionZone(context.Context, *MsgModifyTaxExemptionZone) (*MsgModifyTaxExemptionZoneResponse, error)
	AddTaxExemptionAddress(context.Context, *MsgAddTaxExemptionAddress) (*MsgAddTaxExemptionAddressResponse, error)
	RemoveTaxExemptionAddress(context.Context, *MsgRemoveTaxExemptionAddress) (*MsgRemoveTaxExemptionAddressResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) AddTaxExemptionZone(ctx context.Context, req *MsgAddTaxExemptionZone) (*MsgAddTaxExemptionZoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTaxExemptionZone not implemented")
}
func (*UnimplementedMsgServer) RemoveTaxExemptionZone(ctx context.Context, req *MsgRemoveTaxExemptionZone) (*MsgRemoveTaxExemptionZoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTaxExemptionZone not implemented")
}
func (*UnimplementedMsgServer) ModifyTaxExemptionZone(ctx context.Context, req *MsgModifyTaxExemptionZone) (*MsgModifyTaxExemptionZoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyTaxExemptionZone not implemented")
}
func (*UnimplementedMsgServer) AddTaxExemptionAddress(ctx context.Context, req *MsgAddTaxExemptionAddress) (*MsgAddTaxExemptionAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTaxExemptionAddress not implemented")
}
func (*UnimplementedMsgServer) RemoveTaxExemptionAddress(ctx context.Context, req *MsgRemoveTaxExemptionAddress) (*MsgRemoveTaxExemptionAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTaxExemptionAddress not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_AddTaxExemptionZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddTaxExemptionZone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddTaxExemptionZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/terra.taxexemption.v1beta1.Msg/AddTaxExemptionZone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddTaxExemptionZone(ctx, req.(*MsgAddTaxExemptionZone))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveTaxExemptionZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveTaxExemptionZone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveTaxExemptionZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/terra.taxexemption.v1beta1.Msg/RemoveTaxExemptionZone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveTaxExemptionZone(ctx, req.(*MsgRemoveTaxExemptionZone))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ModifyTaxExemptionZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgModifyTaxExemptionZone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ModifyTaxExemptionZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/terra.taxexemption.v1beta1.Msg/ModifyTaxExemptionZone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ModifyTaxExemptionZone(ctx, req.(*MsgModifyTaxExemptionZone))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddTaxExemptionAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddTaxExemptionAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddTaxExemptionAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/terra.taxexemption.v1beta1.Msg/AddTaxExemptionAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddTaxExemptionAddress(ctx, req.(*MsgAddTaxExemptionAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveTaxExemptionAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveTaxExemptionAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveTaxExemptionAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/terra.taxexemption.v1beta1.Msg/RemoveTaxExemptionAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveTaxExemptionAddress(ctx, req.(*MsgRemoveTaxExemptionAddress))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "terra.taxexemption.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTaxExemptionZone",
			Handler:    _Msg_AddTaxExemptionZone_Handler,
		},
		{
			MethodName: "RemoveTaxExemptionZone",
			Handler:    _Msg_RemoveTaxExemptionZone_Handler,
		},
		{
			MethodName: "ModifyTaxExemptionZone",
			Handler:    _Msg_ModifyTaxExemptionZone_Handler,
		},
		{
			MethodName: "AddTaxExemptionAddress",
			Handler:    _Msg_AddTaxExemptionAddress_Handler,
		},
		{
			MethodName: "RemoveTaxExemptionAddress",
			Handler:    _Msg_RemoveTaxExemptionAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "terra/taxexemption/v1beta1/tx.proto",
}

func (m *MsgAddTaxExemptionZone) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddTaxExemptionZone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddTaxExemptionZone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Addresses) > 0 {
		for iNdEx := len(m.Addresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addresses[iNdEx])
			copy(dAtA[i:], m.Addresses[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Addresses[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.CrossZone {
		i--
		if m.CrossZone {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Incoming {
		i--
		if m.Incoming {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Outgoing {
		i--
		if m.Outgoing {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Zone) > 0 {
		i -= len(m.Zone)
		copy(dAtA[i:], m.Zone)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Zone)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddTaxExemptionZoneResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddTaxExemptionZoneResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddTaxExemptionZoneResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRemoveTaxExemptionZone) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveTaxExemptionZone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveTaxExemptionZone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Zone) > 0 {
		i -= len(m.Zone)
		copy(dAtA[i:], m.Zone)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Zone)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveTaxExemptionZoneResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveTaxExemptionZoneResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveTaxExemptionZoneResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgModifyTaxExemptionZone) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgModifyTaxExemptionZone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgModifyTaxExemptionZone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0x2a
	}
	if m.CrossZone {
		i--
		if m.CrossZone {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Incoming {
		i--
		if m.Incoming {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Outgoing {
		i--
		if m.Outgoing {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Zone) > 0 {
		i -= len(m.Zone)
		copy(dAtA[i:], m.Zone)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Zone)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgModifyTaxExemptionZoneResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgModifyTaxExemptionZoneResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgModifyTaxExemptionZoneResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddTaxExemptionAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddTaxExemptionAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddTaxExemptionAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Addresses) > 0 {
		for iNdEx := len(m.Addresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addresses[iNdEx])
			copy(dAtA[i:], m.Addresses[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Addresses[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Zone) > 0 {
		i -= len(m.Zone)
		copy(dAtA[i:], m.Zone)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Zone)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddTaxExemptionAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddTaxExemptionAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddTaxExemptionAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRemoveTaxExemptionAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveTaxExemptionAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveTaxExemptionAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Addresses) > 0 {
		for iNdEx := len(m.Addresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addresses[iNdEx])
			copy(dAtA[i:], m.Addresses[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Addresses[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Zone) > 0 {
		i -= len(m.Zone)
		copy(dAtA[i:], m.Zone)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Zone)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveTaxExemptionAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveTaxExemptionAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveTaxExemptionAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgAddTaxExemptionZone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Zone)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Outgoing {
		n += 2
	}
	if m.Incoming {
		n += 2
	}
	if m.CrossZone {
		n += 2
	}
	if len(m.Addresses) > 0 {
		for _, s := range m.Addresses {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAddTaxExemptionZoneResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRemoveTaxExemptionZone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Zone)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRemoveTaxExemptionZoneResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgModifyTaxExemptionZone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Zone)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Outgoing {
		n += 2
	}
	if m.Incoming {
		n += 2
	}
	if m.CrossZone {
		n += 2
	}
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgModifyTaxExemptionZoneResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddTaxExemptionAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Zone)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Addresses) > 0 {
		for _, s := range m.Addresses {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAddTaxExemptionAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRemoveTaxExemptionAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Zone)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Addresses) > 0 {
		for _, s := range m.Addresses {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRemoveTaxExemptionAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgAddTaxExemptionZone) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddTaxExemptionZone: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddTaxExemptionZone: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outgoing", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Outgoing = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Incoming", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Incoming = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossZone", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CrossZone = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddTaxExemptionZoneResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddTaxExemptionZoneResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddTaxExemptionZoneResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveTaxExemptionZone) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveTaxExemptionZone: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveTaxExemptionZone: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveTaxExemptionZoneResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveTaxExemptionZoneResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveTaxExemptionZoneResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgModifyTaxExemptionZone) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgModifyTaxExemptionZone: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgModifyTaxExemptionZone: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outgoing", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Outgoing = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Incoming", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Incoming = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossZone", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CrossZone = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgModifyTaxExemptionZoneResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgModifyTaxExemptionZoneResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgModifyTaxExemptionZoneResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddTaxExemptionAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddTaxExemptionAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddTaxExemptionAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddTaxExemptionAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddTaxExemptionAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddTaxExemptionAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveTaxExemptionAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveTaxExemptionAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveTaxExemptionAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveTaxExemptionAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveTaxExemptionAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveTaxExemptionAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
